---
name: 'CI tests'

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
      - develop
  pull_request:

jobs:
  codespell:
    name: 'spell checking'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install linting tools
        run: |
          sudo apt-get install -y git python3 python3-pip
          python3 -m pip install codespell

      - name: codespell
        run: make test-codespell

  shellcheck:
    name: 'script syntax check'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install linting tools
        run: |
          sudo apt-get install -y git python3 python3-pip shellcheck

      - name: shellcheck
        run: make test-shellcheck

  yamllint:
    name: 'yaml linting'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install linting tools
        run: |
          sudo apt-get install -y git python3 python3-pip
          python3 -m pip install codespell

      - name: yamllint
        run: make test-yamllint

  jsonlint:
    name: 'json linting'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install linting tools
        run: |
          sudo apt-get install -y git python3 python3-pip
          python3 -m pip install jsonlint

      - name: jsonlint
        run: make test-jsonlint

  mlc:
    name: 'markup link checker'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install linting tools
        run: |
          mkdir bin
          curl -L https://github.com/becheran/mlc/releases/download/v0.14.3/mlc-x86_64-linux -o bin/mlc
          chmod +x bin/mlc
          echo "$PWD/bin" >> $GITHUB_PATH

      - name: mlc
        run: make test-mlc

  salt-lint:
    name: 'salt linting'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install linting tools
        run: |
          sudo apt-get install -y git python3 python3-pip
          python3 -m pip install salt-lint

  terraform-format:
    name: 'terraform format'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.0.8

      - name: terraform-format
        run: make test-terraform-format

  terraform-validation:
    name: 'terraform validation'
    runs-on: ubuntu-20.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.0.8

      - name: terraform-validation
        run: make test-terraform-validation

#   # TODO: evaluate if this can be run without actual credentials
#   terraform-plan:
#     name: 'terraform plan'
#     runs-on: ubuntu-20.04

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#       # Checkout the repository to the GitHub Actions runner
#       - name: Checkout
#         uses: actions/checkout@v2

#       # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#       - name: Install Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#           terraform_version: 1.0.8

#       - name: terraform-plan
#         run: make test-terraform-plan
