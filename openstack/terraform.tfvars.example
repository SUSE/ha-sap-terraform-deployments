#################################
# ha-sap-terraform-deployments project configuration file
# Find all the available variables and definitions in the variables.tf file
#################################

# OpenStack tenant/project id
project = "my-project"

# Network Region where to deploy the configuration
region_net = "south-1"

# Compute Region where to deploy the configuration
region = "south-1"

# Required: Use an already existing external network
external_network_id = "00000000-0000-0000-0000-000000000000"

# Required: Use an already existing floating IP pool
floatingip_pool = "external"

# Use an already existing network
#network_name = "my-network"

# Use an already existing subnet in this virtual network
#subnet_name = "my-subnet"

# network address range in CIDR notation
# Only used if the network/subnetwork is created by terraform.
# To use the current network address range set the value to an empty string
# To define custom ranges
ip_cidr_range = "10.0.0.0/24"
# Or to use already existing address ranges
#ip_cidr_range = ""

#################################
# General configuration variables
#################################

# Deployment name. This variable is used to complement the name of multiple infrastructure resources adding the string as suffix
# If it is not used, the terraform workspace string is used
# The name must be unique among different deployments
# deployment_name = "mydeployment"

# Add the "deployment_name" as a prefix to the hostname.
#deployment_name_in_hostname = true

# If BYOS images are used in the deployment, SCC registration code is required. Set `reg_code` and `reg_email` variables below
# By default, all the images are PAYG, so these next parameters are not needed
#reg_code = "<<REG_CODE>>"
#reg_email = "<<your email>>"

# To add additional modules from SCC. None of them is needed by default if you use SLES4SAP
#reg_additional_modules = {
#    "sle-module-adv-systems-management/12/x86_64" = ""
#    "sle-module-containers/12/x86_64" = ""
#    "sle-ha-geo/12.4/x86_64" = "<<REG_CODE>>"
#}
# e.g. this is needed to use SLES 15 SP1 (and not SLES4SAP)
#reg_additional_modules = {
#  "sle-ha/15.1/x86_64"                      = "E33DDDEB5342E95E"
#  "sle-module-sap-applications/15.1/x86_64" = "E33DDDEB5342E95E"
#}

# Default os_image. This value is not used if the specific values are set (e.g.: hana_os_image)
# If `openstack` utility is available in your local machine, the next command shows some of the available options
# openstack image list
#os_image = "00000000-0000-0000-0000-000000000000"

# The project requires a pair of SSH keys (public and private) to provision the machines
# The private key is only used to create the SSH connection, it is not uploaded to the machines
# Besides the provisioning, the SSH connection for this keys will be authorized in the created machines
# These keys are provided using the next two variables in 2 different ways
# Path to already existing keys
public_key  = "/home/myuser/.ssh/id_rsa.pub"
private_key = "/home/myuser/.ssh/id_rsa"

# Or provide the content of SSH keys
#public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCt06V...."
#private_key = <<EOF
#-----BEGIN OPENSSH PRIVATE KEY-----
#b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
#...
#P9eYliTYFxhv/0E7AAAAEnhhcmJ1bHVAbGludXgtYWZqOQ==
#-----END OPENSSH PRIVATE KEY-----
#EOF

# Authorize additional keys optionally (in this case, the private key is not required)
# Path to local files or keys content
#authorized_keys = ["/home/myuser/.ssh/id_rsa_second_key.pub", "/home/myuser/.ssh/id_rsa_third_key.pub", "ssh-rsa AAAAB3NzaC1yc2EAAAA...."]

# An additional pair of SSH keys is needed to provide the HA cluster the capability to SSH among the machines
# This keys are uploaded to the machines!
# If `pre_deployment = true` is used, this keys are autogenerated
cluster_ssh_pub = "salt://sshkeys/cluster.id_rsa.pub"
cluster_ssh_key = "salt://sshkeys/cluster.id_rsa"

##########################
# Other deployment options
##########################

# Repository url used to install HA/SAP deployment packages
# It contains the salt formulas rpm packages and other dependencies.
#
## Specific Release - for latest release look at https://github.com/SUSE/ha-sap-terraform-deployments/releases
# To auto detect the SLE version
#ha_sap_deployment_repo = "https://download.opensuse.org/repositories/network:ha-clustering:sap-deployments:v8/"
# Otherwise use a specific SLE version:
#ha_sap_deployment_repo = "https://download.opensuse.org/repositories/network:ha-clustering:sap-deployments:v8/SLE_15_SP3/"
#
## Development Release (use if on `develop` branch)
# To auto detect the SLE version
#ha_sap_deployment_repo = "https://download.opensuse.org/repositories/network:ha-clustering:sap-deployments:devel/"
# Otherwise use a specific SLE version:
#ha_sap_deployment_repo = "https://download.opensuse.org/repositories/network:ha-clustering:sap-deployments:devel/SLE_15_SP3/"

# Provisioning log level (error by default)
#provisioning_log_level = "info"

# Print colored output of the provisioning execution (true by default)
#provisioning_output_colored = false

# Enable pre deployment steps (disabled by default)
#pre_deployment = true

# To disable the provisioning process
#provisioner = ""

# Run provisioner execution in background
#background = true

# QA variables

# Define if the deployment is used for testing purpose
# Disable all extra packages that do not come from the image
# Except salt-minion (for the moment) and salt formulas
# true or false (default)
#offline_mode = false

# Execute HANA Hardware Configuration Check Tool to bench filesystems
# true or false (default)
#hwcct = false

##########################
# Bastion (jumpbox) machine variables
##########################

# Enable bastion usage. This option configures the deployment to only create a unique public ip address that is attached to the bastion machine
bastion_enabled = true

# Bastion SSH keys. If they are not set the public_key and private_key are used
#bastion_public_key  = "/home/myuser/.ssh/id_rsa.pub"
#bastion_private_key = "/home/myuser/.ssh/id_rsa"

# Bastion machine os image. If it is not provided, the os_image variable data is used
#bastion_os_image = "00000000-0000-0000-0000-000000000000"

bastion_flavor = "2C-2GB-40GB"
bastion_srv_ip       = "10.0.0.250"

# Enable a NFS server on the bastion to serve installation files (off by default)
# Use epemeral or volume storage
bastion_data_disk_type = ""
# or
#bastion_data_disk_type = "ephemeral"
# or
#bastion_data_disk_type = "volume"
# or
#bastion_data_disk_type = "rootdisk"
# Disk size for NFS server volume on the bastion (only used for volume, not ephemeral)
#bastion_data_disk_size = "60"

##########################
# NFS server machine variables
##########################

# Enable NFS server (will also be used if any shared_storage_type variable is set to "nfs")
#nfs_enabled = false
# use NFS server as inst_master (NFS mountpoint still need to be configured)
#nfs_inst_master = false
# Use existing nfs data volumes
#nfs_data_volume_names = ["scale-out-data-1", "scale-out-data-2", "scale-out-data-3", "scale-out-data-4", "scale-out-data-5"]
# NFS share mounting point and export. Warning: Since cloud images are using cloud-init, /mnt folder cannot be used as standard mounting point folder
# It will create the NFS export in /mnt_permanent/sapdata/{netweaver_sid} to be connected as {drbd_cluster_vip}:/{netwaever_sid} (e.g.: )192.168.1.20:/HA1
#nfs_nfs_mounting_point = "/mnt_permanent/sapdata"

#########################
# shared storage variables
# Needed if Netweaver is deployed HA or HANA is deployed in scale-out scenario
#########################
#netweaver_shared_storage_type      = "drbd" # drbd,nfs supported at the moment (default: "drbd")
#hana_scale_out_shared_storage_type = "" # only nfs supported at the moment (default: "")

#########################
# HANA machines variables
#########################

# Hostname, without the domain part
#hana_name = "vmhana"

# HANA flavor
hana_flavor = "8C-32GB-40GB-200GB"

# Number of nodes in the cluster
# 2 nodes will always be scale-up
# 4+ nodes are needed for scale-out (also set hana_scale_out_enabled=true)
#hana_count = "2"

# enable to use HANA scale-out
#hana_scale_out_enabled = true

# HANA scale-out role assignments (optional, this can be defined automatically based on "hana_scale_out_standby_count")
# see https://help.sap.com/viewer/6b94445c94ae495c83a19646e7c3fd56/2.0.03/en-US/0d9fe701e2214e98ad4f8721f6558c34.html for reference
#hana_scale_out_addhosts = {
#  site1 = "vmhana03:role=standby:group=default:workergroup=default,vmhana05:role=worker:group=default:workergroup=default"
#  site2 = "vmhana04:role=standby:group=default:workergroup=default,vmhana06:role=worker:group=default:workergroup=default"
#}

# HANA scale-out roles
# These role assignments are made per HANA site
# Number of standby nodes per site
#hana_scale_out_standby_count = 0 # default:0 - Deploy X standby nodes per site. The rest of the nodes will be worker nodes.

#majority_maker_flavor = "2C-2GB-40GB"
#majority_maker_ip     = "10.0.0.9"

# HANA os_image. This value is used to overwrite the default "os_image".
# If `openstack` utility is available in your local machine, the next command shows some of the available options
# openstack image list
#hana_os_image = "00000000-0000-0000-0000-000000000000"

# Disk type for HANA
# By default, volumes are created. To use ephemeral storage (configured in flavor) set to "ephemeral".
#hana_data_disk_type = "volume"
# or
#hana_data_disk_type = "ephemeral"

## only works if volumes are used
# local disk configuration  - scale-up example
#hana_data_disks_configuration = {
#  disks_size       = "100,100,100,100,50,50,50"
#  # The next variables are used during the provisioning
#  luns             = "0,1#2,3#4#5#6"
#  names            = "data#log#shared#usrsap#backup"
#  lv_sizes         = "100#100#100#100#100"
#  paths            = "/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup"
#}

# local disk configuration  - scale-out without standby nodes example
# on scale-out without standby nodes, we need shared storage for shared only and everything else on local disks
#hana_data_disks_configuration = {
#  disks_size       = "100,100,100,100,50,50"
#  # The next variables are used during the provisioning
#  luns             = "0,1#2,3#4#5#6"
#  names            = "data#log#usrsap#backup"
#  lv_sizes         = "100#100#100#100"
#  paths            = "/hana/data#/hana/log#/usr/sap#/hana/backup"
#}

# local Disk configuration - scale-out with standby nodes example
# on scale-out with standby nodes, we need shared storage for data/log/backup/shared and fewer local disks
#hana_data_disks_configuration = {
#  disks_size       = "64"
#  # The next variables are used during the provisioning
#  luns        = "0"
#  names       = "usrsap"
#  lv_sizes    = "100"
#  paths = "/usr/sap"
#}

# HANA cluster vip
hana_cluster_vip           = "10.0.0.12"
hana_cluster_vip_secondary = "10.0.0.13"

# Enable system replication and HA cluster
#hana_ha_enabled = true

# Disable minimal memory checks for HANA. Useful to deploy development clusters.
# Low memory usage can cause a failed deployment. Be aware that this option does
# not work with any memory size and will most likely fail with less than 16 GiB
#hana_ignore_min_mem_check = false

# Select HANA cluster fencing mechanism. 'native' by default
# Find more information in `doc/fencing.md` documentation page
#hana_cluster_fencing_mechanism = "sbd"

# Enable Active/Active HANA setup (read-only access in the secondary instance)
#hana_active_active = true

# The next variables define how the HANA installation software is obtained.
# 'hana_inst_master' is a NFS share (e.g. on the DBRB hosts) where HANA installation files (extracted or not) are stored
# 'hana_inst_master' must be used always! It is used as the reference path to the other variables

# Local folder where HANA installation master will be mounted
#hana_inst_folder = "/sapmedia/HANA"

# To configure the usage there are multiple options:
# 1. Use an already extracted HANA Platform folder structure.
# The last numbered folder is the HANA Platform folder with the extracted files with
# something like `HDB:HANA:2.0:LINUX_X86_64:SAP HANA PLATFORM EDITION 2.0::XXXXXX` in the LABEL.ASC file
hana_inst_master = "url-to-your-nfs-share:/sapdata/sap_inst_media"

# 2. Combine the `hana_inst_master` with `hana_platform_folder` variable.
#hana_inst_master = "url-to-your-nfs-share:/sapdata/sap_inst_media"
# Specify the path to already extracted HANA platform installation media, relative to hana_inst_master mounting point.
# This will have preference over hana archive installation media
#hana_platform_folder = "51053381"

# 3. Specify the path to the HANA installation archive file in either of SAR, RAR, ZIP, EXE formats, relative to the 'hana_inst_master' mounting point
# For multipart RAR archives, provide the first part EXE file name.
#hana_archive_file = "51053381_part1.exe"

# 4. If using HANA SAR archive, provide the compatible version of sapcar executable to extract the SAR archive
# HANA installation archives be extracted to path specified at hana_extract_dir (optional, by default /sapmedia/HANA)
#hana_archive_file = "IMDB_SERVER.SAR"
#hana_sapcar_exe = "SAPCAR"

# For option 3 and 4, HANA installation archives are extracted to the path specified
# at hana_extract_dir (optional, by default /sapmedia_extract/HANA). This folder cannot be the same as `hana_inst_folder`!
#hana_extract_dir = "/sapmedia_extract/HANA"

# The following SAP HANA Client variables are needed only when you are using a HANA database SAR archive for HANA installation.
# HANA Client is used by monitoring & cost-optimized scenario and it is already included in HANA platform media unless a HANA database SAR archive is used
# You can provide HANA Client in one of the two options below:
# 1. Path to already extracted hana client folder, relative to hana_inst_master mounting point
#hana_client_folder = "SAP_HANA_CLIENT"
# 2. Or specify the path to the hana client SAR archive file, relative to the 'hana_inst_master'. To extract the SAR archive, you need to also provide compatible version of sapcar executable in variable hana_sapcar_exe
# It will be extracted to hana_client_extract_dir path (optional, by default /sapmedia_extract/HANA_CLIENT)
#hana_client_archive_file = "IMDB_CLIENT20_003_144-80002090.SAR"
#hana_client_extract_dir = "/sapmedia_extract/HANA_CLIENT"

# Each host IP address (sequential order).
hana_ips = ["10.0.0.10", "10.0.0.11"]

# HANA instance configuration
# Find some references about the variables in:
# https://help.sap.com
# HANA instance system identifier. The system identifier must be composed by 3 uppercase chars/digits string starting always with a character (there are some restricted options).
#hana_sid = "PRD"
# HANA instance number. It's composed of 2 integers string
#hana_instance_number = "00"
# HANA instance master password. The password must contain at least 8 characters, comprising 1 digit, 1 upper-case character, 1 lower-case character and no special characters.
#hana_master_password = "YourPassword1234"
# HANA primary site name. Only used if HANA's system replication feature is enabled (hana_ha_enabled to true)
#hana_primary_site = "Site1"
# HANA secondary site name. Only used if HANA's system replication feature is enabled (hana_ha_enabled to true)
#hana_secondary_site = "Site2"

# enable this to deploy the Cost optimized scenario (off by default)
#scenario_type = "cost-optimized"

#######################
# SBD related variables
#######################

# In order to enable SBD, an ISCSI server is needed as right now is the only option
# All the clusters will use the same mechanism
# In order to enable the iscsi machine creation _fencing_mechanism must be set to 'sbd' for any of the clusters

# Hostname, without the domain part
#iscsi_name = "vmiscsi"

# iSCSI server os_image. This value is used to overwrite the default "os_image".
# If `openstack` utility is available in your local machine, the next command shows some of the available options
# openstack image list
#iscsi_os_image = "00000000-0000-0000-0000-000000000000"

# iSCSI server address
iscsi_srv_ip = "10.0.0.4"
# Number of LUN (logical units) to serve with the iscsi server. Each LUN can be used as a unique sbd disk
iscsi_lun_count = 3
# Disk size in GB used to create the LUNs and partitions to be served by the ISCSI service
iscsi_disk_size = 1

# Flavor of VM (vCPUs and RAM)
iscsi_flavor = "2C-2GB-40GB"

##############################
# Monitoring related variables
##############################

# Enable the host to be monitored by exporters
#monitoring_enabled = true

# Hostname, without the domain part
#hana_name = "vmmonitoring"

monitoring_flavor = "4C-8GB-40GB"

# Monitoring server os_image. This value is used to overwrite the default "os_image".
# If `openstack` utility is available in your local machine, the next command shows some of the available options
# openstack image list
#monitoring_os_image = "00000000-0000-0000-0000-000000000000"

# IP address of the machine where Prometheus and Grafana are running
#monitoring_srv_ip = "10.0.0.4"

########################
# DRBD related variables
########################

# Enable drbd cluster
#drbd_enabled = true

# Hostname, without the domain part
#drbd_name = "vmdrbd"

drbd_flavor = "8C-32GB-40GB-200GB"

# DRBD server os_image. This value is used to overwrite the default "os_image".
# If `openstack` utility is available in your local machine, the next command shows some of the available options
# openstack image list
#drbd_os_image = "00000000-0000-0000-0000-000000000000"

# Disk type for DRBD
# By default, volumes are created. To use ephemeral storage (configured in flavor) set to "ephemeral".
drbd_data_disk_type = "volume"
# or
#drbd_data_disk_type = "ephemeral"

# Disk size for DRBD volumes (only used for volume, not ephemeral)
#drbd_data_disk_size = 50

# Each drbd cluster host IP address (sequential order).
drbd_ips = ["10.0.0.20", "10.0.0.21"]
drbd_cluster_vip = "10.0.0.22"

# Select DRBD cluster fencing mechanism. 'native' by default
drbd_cluster_fencing_mechanism = "sbd"

# NFS share mounting point and export. Warning: Since cloud images are using cloud-init, /mnt folder cannot be used as standard mounting point folder
# It will create the NFS export in /mnt_permanent/sapdata/{netweaver_sid} to be connected as {drbd_cluster_vip}:/{netwaever_sid} (e.g.: )192.168.1.20:/HA1
drbd_nfs_mounting_point = "/mnt_permanent/sapdata"

#############################
# Netweaver related variables
#############################

# Enable netweaver cluster
#netweaver_enabled = true

# Hostname, without the domain part
#netweaver_name = "vmnetweaver"

# Netweaver APP server count (PAS and AAS)
# Set to 0 to install the PAS instance in the same instance as the ASCS. This means only 1 machine is installed in the deployment (2 if HA capabilities are enabled)
# Set to 1 to only enable 1 PAS instance in an additional machine`
# Set to 2 or higher to deploy additional AAS instances in new machines
#netweaver_app_server_count = 2

netweaver_flavor = "4C-8GB-40GB"

# Netweaver server os_image. This value is used to overwrite the default "os_image".
# If `openstack` utility is available in your local machine, the next command shows some of the available options
# openstack image list
#netweaver_os_image = "00000000-0000-0000-0000-000000000000"

# Set the Netweaver product id. The 'HA' sufix means that the installation uses an ASCS/ERS cluster
# Below are the supported SAP Netweaver product ids if using SWPM version 1.0:
# - NW750.HDB.ABAP
# - NW750.HDB.ABAPHA
# - S4HANA1709.CORE.HDB.ABAP
# - S4HANA1709.CORE.HDB.ABAPHA
# Below are the supported SAP Netweaver product ids if using SWPM version 2.0:
# - S4HANA1809.CORE.HDB.ABAP
# - S4HANA1809.CORE.HDB.ABAPHA
# - S4HANA1909.CORE.HDB.ABAP
# - S4HANA1909.CORE.HDB.ABAPHA
# - S4HANA2020.CORE.HDB.ABAP
# - S4HANA2020.CORE.HDB.ABAPHA
# - S4HANA2021.CORE.HDB.ABAP
# - S4HANA2021.CORE.HDB.ABAPHA

# Example:
#netweaver_product_id = "NW750.HDB.ABAPHA"

# NFS share to store the Netweaver shared files. Only used if drbd_enabled is not set. For single machine deployments (ASCS and PAS in the same machine) set an empty string
#netweaver_nfs_share = "url-to-your-netweaver-sapmnt-nfs-share"

# Path where netweaver sapmnt data is stored.
#netweaver_sapmnt_path = "/sapmnt"

# Preparing the Netweaver download basket. Check `doc/sap_software.md` for more information

# Netweaver installation required folders
# SAP SWPM installation folder, relative to the netweaver_inst_media mounting point
#netweaver_swpm_folder     =  "your_swpm"
# Or specify the path to the sapcar executable & SWPM installer sar archive, relative to the netweaver_inst_media mounting point
# The sar archive will be extracted to path specified at netweaver_extract_dir under SWPM directory (optional, by default /sapmedia_extract/NW/SWPM)
#netweaver_sapcar_exe = "your_sapcar_exe_file_path"
#netweaver_swpm_sar = "your_swpm_sar_file_path"
# Folder where needed SAR executables (sapexe, sapdbexe) are stored, relative to the netweaver_inst_media mounting point
#netweaver_sapexe_folder   =  "download_basket"
# Additional media archives or folders (added in start_dir.cd), relative to the netweaver_inst_media mounting point
#netweaver_additional_dvds = ["dvd1", "dvd2"]

netweaver_ips         = ["10.0.0.30", "10.0.0.31", "10.0.0.32", "10.0.0.33"]
netweaver_virtual_ips = ["10.0.0.34", "10.0.0.35", "10.0.0.36", "10.0.0.37"]

# Netweaver installation configuration
# Netweaver system identifier. The system identifier must be composed by 3 uppercase chars/digits string starting always with a character (there are some restricted options)
#netweaver_sid = "HA1"
# Netweaver ASCS instance number. It's composed of 2 integers string
#netweaver_ascs_instance_number = "00"
# Netweaver ERS instance number. It's composed of 2 integers string
#netweaver_ers_instance_number = "10"
# Netweaver PAS instance number. If additional AAS machines are deployed, they get the next number starting from the PAS instance number. It's composed of 2 integers string
#netweaver_pas_instance_number = "01"
# NetWeaver or S/4HANA master password. 
# It must follow the SAP Password policies such as having 8 - 14 characters for NetWeaver or 10 - 14 characters for S/4HANA.
# It cannot start with special characters and must contain a combination of
# upper and lower case characters and numbers (Invalid characters are backslash and double quote).
#netweaver_master_password = "SuSE1234"

# Enabling this option will create a ASCS/ERS HA available cluster together with a PAS and AAS application servers
# Set to false to only create a ASCS and PAS instances
#netweaver_ha_enabled = true

# Select Netweaver cluster fencing mechanism. 'native' by default
netweaver_cluster_fencing_mechanism = "sbd"
